<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Distributed Systems on Weihang Lo</title><link>https://weihanglo.tw/tags/distributed-systems/</link><description>Recent content in Distributed Systems on Weihang Lo</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 20 Jun 2020 00:00:00 +0800</lastBuildDate><atom:link href="https://weihanglo.tw/tags/distributed-systems/index.xml" rel="self" type="application/rss+xml"/><item><title>WWW 0x16: JWT、分散式 ID 生成、k8s 安全性</title><link>https://weihanglo.tw/posts/2020/www-0x16/</link><pubDate>Sat, 20 Jun 2020 00:00:00 +0800</pubDate><guid>https://weihanglo.tw/posts/2020/www-0x16/</guid><description>這裡是 WWW 第貳拾貳期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
Kubernetes Blog: 11 Ways (Not) to Get Hacked 管理 Kubernetes 就和管理 VM 一樣，一定會遇到各種安全性問題，這篇文章提出 11 種可以增加安全性的小撇步，順便分享 @hwchiu 整理的中文版，資訊更多更完整，感恩惜福。
JWT 是否適合 session mechanism 最近翻到 The Ultimate Guide to handling JWTs on frontend clients 這篇小巧精緻的 JWT 身分驗證教學，流程圖簡明易懂，內容包括：
JWT 的結構：header.payload.signature JWT 會儲存在 client-side，不適合儲存敏感資料 JWT 不適合放在 browser storage，容易被 XSS（所以推薦 in-memory） 由於 JWT 本身無狀態，誰幹走都能奪權，請保持 JWT 過期時間不會太長，文中案例是 15 分鐘 鑑於過期比較快，請配合 HttpOnly 的 cookie 的 refresh token 來更新 JWT（但 XSS 還是有點不安全） Revoke all login sessions 可以簡單透過 refresh token 達成：刪除該使用者的所有 refresh token 就行 Server-side rendering 和 JWT + refresh token 如何整合：JWT 會存在 SSR server 上，refresh token 則是每個 page request 都會產生新的 token 有趣的是，留言提出許多 JWT 與這篇文章的實作總總問題，像是：</description></item></channel></rss>