<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on Weihang Lo</title><link>https://weihanglo.tw/tags/rust/</link><description>Recent content in Rust on Weihang Lo</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 01 Nov 2020 08:00:00 +0800</lastBuildDate><atom:link href="https://weihanglo.tw/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>我眼中的 Rust 2020：生態工具發展</title><link>https://weihanglo.tw/posts/2020/rust-2020-tooling-ecosystem/</link><pubDate>Sun, 01 Nov 2020 08:00:00 +0800</pubDate><guid>https://weihanglo.tw/posts/2020/rust-2020-tooling-ecosystem/</guid><description>最近越來越多人想要學 Rust，也有一些朋友來諮詢 Rust 相關的生態，這裡稍微囉嗦一下我眼中的 Rust 2020 吧。
如果沒有拖稿的話，文章應該會分三篇，表列如下：
Rust 生態工具發展 有多少函式庫，都在發展什麼輪子 IDE 和 Debugger、測試和開發工具支援程度 Cross-Compilation、Distribution 工具支援程度 與其他語言的 Interpolation 穩定性與 Compatibility Rust 業界採用情形 大型公司如 FAANG、RedHat、Dropbox、Mozilla 等如何採用 Cloudflare、Fastly 等 CDN 服務商對 Rust 的適用 區塊鏈、高頻交易、加密貨幣領域的公司 嵌入式系統、遊戲界與其他領域 Rust 開源社群 Rust 團隊開放分工的作法 工作組專案組的籌備 核心團隊對 Rust 語言的展望和規劃 研討會 Meetup 和線上討論的風氣與聚集地 台灣、華文圈的 Rust 生態 本篇將會介紹 「Rust 生態工具發展」。
註零：本文會有大量連結，歡迎點進去。
註一：本文是於 2020-09-19 和朋友討論的文字整理，所以會和「好讀文章」有點差距，請見諒。
註二：本文和 Rust 官方的 Call for blogs 2020 無關，主要是回顧 2020 這年 Rust 在我眼中如何存在。</description></item><item><title>WWW 0x17: 再見 weekly</title><link>https://weihanglo.tw/posts/2020/www-0x17/</link><pubDate>Fri, 17 Jul 2020 00:00:00 +0800</pubDate><guid>https://weihanglo.tw/posts/2020/www-0x17/</guid><description>這裡是 WWW 第貳拾參期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
Weekly 無限期停刊 很遺憾要在此宣布 Wow Weihang Weekly 將無限期停刊，這一期沒意外會是最後一期，其實很訝異自己可以堅持半年每個禮拜都出三篇文章摘要，但至今週刊已經逐漸脫離初衷。當初想寫週刊主要有兩個原因：咀嚼自己所見並分享，還有當作資料庫供未來查詢。我覺得 WWW 一直有達到分享的功效，但卻僅僅止於「摘要」，而且若當週事務繁忙，就連摘要都看起來像是摘要機器人產生出來的，這種純手工的事情，我覺得不需要人類介入，這是第一個停刊理由。
第二個則是週刊很難供自己日後查詢使用，你只能在週刊標題和標籤上下文章，了不起之後做一個站內全文搜尋，但這樣都太過繁瑣，我希望有一個心智圖或是關係圖的呈現方式將我所學串連起來，並提供給其他人參考我怎麼連結每個概念，但週刊的形式真的力有未逮，放棄這條路可能是個不錯的選擇。
相信我們會再相見的。
兩個不錯的 Rust 入門學習資源 最近越來越多人對 Rust 產生興趣，這裡就來推薦除了 TRPL 以外，可以快速上手（其實不行）的學習資源：
Rust 程式設計語言（正體中文版）：其實就是 TRPL 的翻譯版，是 Rust Taiwan 社群近期嘔心理解的作品，有任何問題請到 GitHub Repo 回應或直接寄送GitHub 站內郵件給我。 A half-hour to learn Rust：一個我覺得 blog post 幹話很多的 Rustacean 寫的三十分鐘學習 Rust（結果預計閱讀時間顯示 51 分鐘 😂），範例程式碼超多，很適合熟透其他語言的開發者閱讀，會發現 Rust 語法其實非常現代（當然還有可愛的 Turbofish)，在還沒進入 lifetime 前完全可以快速掌握 XD Tour of Rust：向 A Tour of Go 致敬的專案，Rust 版本涵蓋的主題非常全面，static/dynamic dispatch 都講了，其實已經超越入門了。但不得不說 Go 版本讀取速度快不少，而且自己魔改的 Ferris 有夠醜。總歸一句還是很值得作為入門讀物，尤其是有 Playground 很方便。 Multitenancy Webinar: Better walls make better tenants Google 的人來講怎麼做 Kubernetes 的 multi-tenancy，基本上是透過 namespace 切分 tenancy，就可以做到在同一個 cluster 內「共享資源」和「限制資源」。這篇演講完整複習了 namespace resource limit、limit range，到 pod security policy 和 network policy 種種和 multi-tenancy 相關的設定，可為抱佛腳大全。</description></item><item><title>WWW 0x14: Structured concurrency is promising</title><link>https://weihanglo.tw/posts/2020/www-0x14/</link><pubDate>Sat, 06 Jun 2020 00:00:00 +0800</pubDate><guid>https://weihanglo.tw/posts/2020/www-0x14/</guid><description>這裡是 WWW 第貳拾期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
Oxidizing the technical interview 非常瞎搞的一篇 Rust 面試文，面試者要求解演算法題，被面試者開始手寫 libcore 的 trait 再用 compile time const fn 做到 O(1) runtime。內文更提及 no_core 也就是不導入 libcore，本來以為是開玩笑，，沒想到還真有 no_core 的 feature，太可怕了。
MongoDB Retryable Reads and Writes 最近在做 MongoDB zero downtime 遷移與升級，本來以為已經萬無一失，卻還是在 reconfig 切換 primary 時遇到not master and slaveOk=false 這種錯誤，導致部分使用者 HTTP request status 500，推斷發生原因如下：
A server 為 primary client 與 A server 建立 TCP 連線 其他 server 選為 primary，A server 切換為 secondary， client 沿用舊連線連到 A server，發生 not master and slaveOk=false 錯誤 根據 client spec，這種錯誤會透過 retryReads 和 retryWrites 重試，而且這些功能在 MongoDB 4.</description></item><item><title>WWW 0x13: 據說網路釣魚比海釣容易成功</title><link>https://weihanglo.tw/posts/2020/www-0x13/</link><pubDate>Sat, 30 May 2020 00:00:00 +0800</pubDate><guid>https://weihanglo.tw/posts/2020/www-0x13/</guid><description>這裡是 WWW 第拾玖期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
B!tch to Boss 這應該是我看過最有趣的 addons，而且還是 Mozilla 官方出品，儘管無法有效減少 internet troll，至少一直有人叫你老闆就是爽。
Great job, Mozilla!
關於 Microsoft 的幾個 Rust 新聞與專案 最近除了 AWS 在找 Rust SDK 和 lambda 的職缺，微軟也不斷在 Rust 有所著墨，簡單介紹兩個專案新聞:
Microsoft: Why we used programming language Rust over Go for WebAssembly on Kubernetes app：微軟最初開源 Helm 的 Deis Lab 最近嘗試使用 Rust 開發一個 kubelet 叫做 krustlet，專門用來跑 WebAssembly app Microsoft: Our Rust programming language Windows runtime library is now in preview：微軟官方寫了一個 WinRT 的 Rust library，正在 preview stage，可以用 Rust 開發 UWP 了，官方技術部落格甚至有踩地雷的 demo！ To test its security mid-pandemic, GitLab tried phishing its own work-from-home staff.</description></item><item><title>WWW 0x11: 庫存文章已用罄</title><link>https://weihanglo.tw/posts/2020/www-0x11/</link><pubDate>Sat, 16 May 2020 00:00:00 +0800</pubDate><guid>https://weihanglo.tw/posts/2020/www-0x11/</guid><description>這裡是 WWW 第拾柒期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
Optimizing Kubernetes Resource Requests/Limits for Cost-Efficiency and Latency / Henning Jacobs 如何設定 K8s Pod 的資源最低需求 containers.resources.requests 和最高限制 containers.resources.limits 一直是門藝術，最低需求影響 scheduler 如何安排 pod，最高限制，尤其是 memory，可能會有 OOM kill 把 pod 殺死。
@hjabocs 分享了幾個作法：
測來測去發現停用 CPU CFS 的 latency 最小 要記得你的 node 會被 system、kubelet，還有 container runtime 佔去部分資源 😨 用 Admission Controller 設定和 requests 一樣的 limit，防止 overcommit 知道你的 pod 的 container-aware limit，例如 JVM 就是 maxheap，node cluster 就是你設定的 process number 用他的本人寫的 K8s Resouce Report 來看冗余資源可以幫你省下多少美金 可以設定一些 priorityclass 很低的 pod 作為 buffer capacity，讓資源不足時他們可以先被踢掉應急，再慢慢等 Cluster autoscaler 來 privision 新 node 又在老王賣瓜推銷自己寫的 downscaler，離峰時間自動關機省錢 Rust Logo is a Bike Chainring!</description></item><item><title>WWW 0x10: 重構不是病，寫起來要人命</title><link>https://weihanglo.tw/posts/2020/www-0x10/</link><pubDate>Sat, 09 May 2020 00:00:00 +0800</pubDate><guid>https://weihanglo.tw/posts/2020/www-0x10/</guid><description>這裡是 WWW 第拾陸期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
Graceful shutdown in Kubernetes is not always trivial 對不起，分享一篇 medium 付費牆的文章。重點節錄：
讓你的 app delay 一些時間再停止接收 connection 如果你沒辦法控制 app（code 不是你寫的），可加 preStop hook 來控制 如果加了沒用，請去看該 app 如何處理各種 Signal 請測試，請分析，不要盲目寫完就當作自己做好 graceful shutdown 三篇文章了解 TiDB 技术内幕 - 说计算 由於開源資料庫系統 TiDB 為中國人研發，中文撰寫的文件非常多，這篇主要介紹 SQL 的 relation model 如何映射到 Key-Value model，處理 index 和 unique index 也不相同。很有趣，值得一讀（TiDB/TiKV 的 source code 也是 😂）。
Rewriting the heart of our sync engine Dropbox 重寫整個電腦版的同步引擎 Nucleus，花了四年時間，節錄些（其實不是節錄）有趣發現：</description></item><item><title>WWW 0x0C: 未具名</title><link>https://weihanglo.tw/posts/2020/www-0x0c/</link><pubDate>Sat, 11 Apr 2020 00:00:00 +0800</pubDate><guid>https://weihanglo.tw/posts/2020/www-0x0c/</guid><description>既然疫情嚴重，連假就在家加班吧！
— Weihang Lo 2020.4
這裡是 WWW 第拾貳期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
Words Are Hard - An Essay on Communicating With Non-Programmers 以直白的口吻，分享和不同背景的人講解技術的法則。節錄重點如下：
避免用過多行話 放尊重點，不要擺出紆尊降貴的姿態 給技術解釋加些人性生動的類比 視覺化圖表比口語更易理解 承認自己不熟，但可花時間研究 願我們一起打破工程師古怪又難溝通的刻板印象。
The Raft Consensus Algorithm 最近嘗試貢獻 TiKV，順便複習一下 Raft 共識演算法 Raft 主要訴求是 Understandability，因為 Paxos 太複雜（無誤），Raft 的 server 分為三個 state：
follower：所有非 leader 的 server 都是 follower leader：所有 client request 都會送到 leader，一個 Raft group 理論上只有一個 leader candidate：達到 election timeout 的 follower 會把自己提升為 candidate，並向其他 server 發出訊息：「請 promote 我當 leader」 而 Raft 主要有兩個的步驟：</description></item><item><title>WWW 0x0B: 個資被偷和管理 DNS 紀錄，孰難孰易</title><link>https://weihanglo.tw/posts/2020/www-0x0b/</link><pubDate>Sat, 04 Apr 2020 00:00:00 +0800</pubDate><guid>https://weihanglo.tw/posts/2020/www-0x0b/</guid><description>Zoom 很讚，host 可以看你有沒有認真
— Zoom: Attendee attention tracking
這裡是 WWW 第拾壹期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
What future does the captical of Japan carry? Note: 東京不算是日本的「法定」首都
這份簡報講解 Rust 最流行的非同步框架 Tokio 運作原理，透過圖像化的流程說明 future 如何於 Tokio 互動中被 poll 和 waken，非常直觀易理解，比敝人在 COSCUP 2019 的簡報 Our Future in Rust 好太多了。
Using Zoom? Here are the privacy issues you need to be aware of 因為疫情緣故，最近 Zoom 很夯，剛好有篇文章寫到 Zoom 有很多噁心有趣的 feature：
host 可以看參與者專不專心，超過 30 喵沒在看 zoom 就會 alert 會存一份聊天紀錄給 host，但沒說 private message 會不會給 host 宣稱蒐集名字、實體位置、email、電話、公司和職稱但不會拿去賣，只會用在「business purposes」 推薦有空看看這篇文章，尤其是「How you can protect your data」一節。</description></item><item><title>WWW 0x0A: 嗯，你這塊 0xDEADBEEF</title><link>https://weihanglo.tw/posts/2020/www-0x0a/</link><pubDate>Sat, 28 Mar 2020 00:00:00 +0800</pubDate><guid>https://weihanglo.tw/posts/2020/www-0x0a/</guid><description>A programmer had a problem. He thought to himself, &amp;ldquo;I know, I&amp;rsquo;ll solve it with threads!&amp;rdquo;. has Now problems. two he
— Davidlohr Bueso
這裡是 WWW 第拾期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
The Missing Semester of Your CS Education 這是近期看過最實用導向的大學課程了！由 MIT 博士生授課，但不教死板又混亂的計算機科學，而是貼近開發者，異常實際的工具和技巧。
雖然內容對部分業界人士來說可能略淺，例如 metaprogramming 居然是在講 build system 和 makefile，不過學資訊的學生不一定熟稔，非常適合作為進入業界前先修的「失落的課程」。我自己印象最深刻的是「 &amp;hellip;if you start a command with a leading space it won’t be added to you shell history. 」真的是嚇歪我的毛，推薦大家翻翻看看。
順便提一下 JonHoo 是我有認真在看的 live-coder。嗯，應該猜的到他寫什麼語言</description></item><item><title>WWW 0x07: 為什麼薯餅要炸兩次</title><link>https://weihanglo.tw/posts/2020/www-0x07/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate><guid>https://weihanglo.tw/posts/2020/www-0x07/</guid><description>這裡是 WWW 第柒期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
Why is Rust the Most Loved Programming Language? 又到了推坑 Rust 的時間！這次，Intellij Rust 和 Rust Analyzer 的作者想聊聊為什麼 Rust 值得「最受喜愛的程式語言」的稱號，節錄我覺得蠻有共鳴的點：
Intellij Rust：用 Kotlin 寫的 Jetbrains IDE Rust Plugin Rust Analyzer：新一代的 Rust IDE language server Keyword First Syntax：搜尋 foo 函式只要文字搜尋 fn foo 就解決，有利於一般人開發，更使得 IDE 的 parser 更容易開發 Crates：Rust 的 crate 是一個編譯單元，但並沒有 global shared namespace，取而代之的是每個 crate 都會是你的 dependant crate 的一個 property，解決了 lib 命名衝突問題 Eq 並非多型：以前從來沒想過這個問題，但的確不同型別的比較直接 compile error 很合理，不過代價是需要寫一堆 as usize 😂 Trivial Data Types：透過 #[derive(.</description></item><item><title>WWW 0x04: Not feeling the async pressure</title><link>https://weihanglo.tw/posts/2020/www-0x04/</link><pubDate>Sat, 15 Feb 2020 00:00:00 +0800</pubDate><guid>https://weihanglo.tw/posts/2020/www-0x04/</guid><description>這裡是 WWW 第肆期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
&amp;ldquo;Performance Matters&amp;rdquo; by Emery Berger 最近滿紅的一個關於 performance measurement 的 影片，講者演講功力深厚，把嚴肅 performance analysis/profiling 議題以輕鬆的口吻娓娓道出，非常推薦。
節錄一些我覺得有趣的點：
以 CPU 和 transistor 的發展闡述為什麼現代程式越來越注重效能 解釋 Performance Analysis 和 Performance Profiling 有什麼差別 Performance Analysis 是需要統計而且不是 eyeball statistics，然後要排除環境變因 想做 Performance Profiling 可以從另一個角度開始：讓其他不想測試的部分「變慢」 Why Discord is switching from Go to Rust 簡體中文譯文
標題乍看下有點聳動，其實內容很平實，完整交代來龍去脈：
背景：Discord ReadState 服務架構和資料結構 問題：高度手動最佳化的 Go 實作仍有兩分鐘一次的 GC spike，測試好幾個 Go 版本都沒解決 行動：用沒有 GC 的 Rust 重寫，公司內其他團隊也有成功案例 成果：各項指標皆勝原本 Go 實作，但有強調不要腦衝什麼都 RiiR 紫色是 Go，藍色是還沒升級 Tokio 0.</description></item><item><title>WWW 0x02: Distroless Docker for distressed human</title><link>https://weihanglo.tw/posts/2020/www-0x02/</link><pubDate>Sat, 01 Feb 2020 00:00:11 +0800</pubDate><guid>https://weihanglo.tw/posts/2020/www-0x02/</guid><description>這裡是 WWW 第貳期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
How to Review a Pull Request 這份是 Rust 的 crates.io（類似 PyPI 和 rubygems）如何審閱拉取請求的文件， 和 Google 那份不太一樣，更貼近專案一點，節錄重點：
先拉到自己的本地分支，看看 PR 是否達到他宣稱的療效（檢查一般行為） 嘗試用各種手段打爆他（檢查 edge case） 如果有任何失敗，請寫清楚重新產生錯誤的流程 再來就是理解這個修改到底合不合理，是不是其實不需要 這篇 review guideline 短短的，剩下的自己看囉。
Distroless Docker: Containerizing Apps, not VMs - Matthew Moore 本文是 Google 雇員介紹 Distroless Image 演講的重點摘要，對容器化和 Docker 最佳化有興趣的朋友千萬別錯過。
Distroless GitHub Repo 在此
Q：何謂 Distroless Image
Distroless 的 distro 是指 Linux 發行版（distro），加了一個 less 就是替 docker image 瘦身，只留 app source 和 runtime 需要的 dependencies，把發行版中不必要的東西都幹掉。</description></item><item><title>RustConf 2019 雲參訪錄（1）</title><link>https://weihanglo.tw/posts/2019/rustconf-2019-1/</link><pubDate>Sun, 29 Sep 2019 00:00:00 +0800</pubDate><guid>https://weihanglo.tw/posts/2019/rustconf-2019-1/</guid><description>RustConf 是 Rust 社群年度最重要的研討會之一，從 Rust 在 2015 年 1.0 版正式發布之後，2016、2017、2018 連續三年都在美國舉辦，今年當然不例外，八月底在 NBA 球迷稱作 Rip City 的波特蘭舉行。由於歷史悠久，加上 Rust 社群在美國較為活躍，許多 Rust Core Team 成員都會共襄盛舉，這場研討會是 Rust 開發者絕對不能錯過的盛事。
RustConf 歷年來皆由 Tilde Inc. 旗下的 Skylight 主辦，Skylight 是一個 Rails profiler in production 的解決方案，產品中關鍵的模組用了不少 Rust。
好了，介紹完背景，這篇文章主要是紀錄小弟我「在 YouTube 上」觀看演講的心得分享，當然，RustConf 除了主要的演講軌，還有不少場邊工作坊等小活動，這就留給看倌明年到實地考察啦！
目錄 這篇文章僅為部分心得，陸續更新中。
不負責任中譯講題 內容摘要 ✅ Rust 慣老闆們如何管理 Rust 社群 回顧 Rust 過去一年成就，現在如何治理 Rust 團隊與社群，又遭遇什麼困難 ✅ Rust 大法好，統一資料科學沒煩惱 資料科學工具 Weld 底層 JIT compiler 與 Runtime 技術選型與演進過程 ✅ 鏽媳婦也得見公婆的臉書 Facebook 內部的 Rust 生態現況與如何推廣 ✅ Constant Evaluation 的五十道陰影 const eval 目前開發狀況與未來藍圖 ✅ 用 Rust 後依舊慢的 Electron MongDB Compass 用 Rust + WASM 開發 Electron 心得 Opening Keynote 回到目錄</description></item><item><title>Rust: Ownership and References</title><link>https://weihanglo.tw/posts/2018/rust-ownership-and-references/</link><pubDate>Sun, 30 Sep 2018 11:07:45 +0800</pubDate><guid>https://weihanglo.tw/posts/2018/rust-ownership-and-references/</guid><description>This is a series of quick notes about the fundamentals of the Rust programming language. It would cover parts of basic concepts and patterns in Rust. As a Rust begineer and a non-native English speaker, I may make some silly mistakes in my notes. Please contact me if there are some misleading words.
(written on 2018-09-30)
Ownership and References While a program runs, it need a way to manage memory .</description></item><item><title>【譯】Rust vs. Go</title><link>https://weihanglo.tw/posts/2018/rust-vs-go/</link><pubDate>Fri, 20 Jul 2018 10:58:59 +0800</pubDate><guid>https://weihanglo.tw/posts/2018/rust-vs-go/</guid><description>本文譯自 Julio Merino 的 Rust vs. Go。Julio Merino 目前是 G 社僱員，在 G 社工作超過 8 年，無論工作內外，都接觸開發不少 Go 語言，並撰寫 Rust 點評系列文，來聽聽他對 Rust 與 Go 的想法吧。
Thanks Julio Merino for this awesome article!
歡迎來到「Rust 點評」系列特別篇，也是我在系列文開始就承諾撰寫的主題，將探討一個難以忽視的大哉問：Rust 與 Go 孰優孰劣？
這麼比較並沒有根據，所以不會有標準答案。我認為人們會把這兩種語言作伙比較只因為它們幾乎同時釋出，而且 Rust 的釋出像是在回應 Go。除此之外，兩種語言都被認為聚焦在系統軟體上（system software），但其實它們大相徑庭，就算都專注系統軟體，各自目標的軟體類型也不盡相同。
Go 可以視為「做對了的 C」或是「Python 的替代品」。Go 在開發網路伺服器與自動化工具的領域發光發熱。Rust 專注在正確與安全性，定位在 C++ 與 Haskell 之間，如同之前提及，可以視為「務實的 Haskell」。儘管 Rust 的語言抽象程度很高，它仍承諾這些抽象是零成本（zero-cost abstraction），也就是說，它應該擅長寫任何系統專案。
這篇個人點評基於我用兩種語言寫了相同的專案 sandboxfs。最初實作是用 Go，而我開發了另一個用 Rust 的實驗性改寫（還沒有完全檢驗），兩個實作都通過相同的測試套件（test suite）。除了透過這次改寫來學習語言，也因為當我分析 Go 實作版本的效能時，發現熱點總是在 Go 的執行環境（runtime），我想要嘗試看看簡單的 Rust 改寫後效能能否長進，而情況似乎就是如此。隨著這次改寫，我很訝異原本的 Go 實作版本有不少潛在的並行（concurrency）漏洞，因為許多 Rust 並不允許我利用相同的設計改寫。</description></item><item><title>【譯】Tokio 內部機制：從頭理解 Rust 非同步 I/O 框架</title><link>https://weihanglo.tw/posts/2018/tokio-internals/</link><pubDate>Fri, 05 Jan 2018 08:44:43 +0800</pubDate><guid>https://weihanglo.tw/posts/2018/tokio-internals/</guid><description>本文譯自 Tokio internals: Understanding Rust&amp;rsquo;s asynchronous I/O framework from the bottom up。
Thanks David Simmons for this awesome article!
Tokio 是 Rust 的開發框架，用於開發非同步 I/O 程式（asynchronous I/O，一種事件驅動的作法，可實現比傳統同步 I/O 更好的延伸性、效能與資源利用）。可惜的是，Tokio 過於精密的抽象設計，招致難以學習的惡名。即使我讀完教程後，依然不認為自己充分內化這些抽象層，以便推斷實際發生的事情。
從前的非同步 I/O 相關開發經驗甚至阻礙我學習 Tokio。我習慣使用作業系統提供的 selection 工具（例如 Linux epoll）當作起點，再轉移至 dispatch、state machine 等等。倘若直接從 Tokio 抽象層出發，卻沒有清楚了解 epoll_wait() 在何處及如何發生，我會覺得難以連結每個概念。Tokio 與 future-driven 的方法就好像一個黑盒子。
我決定不繼續由上而下的方法學習 Tokio，反其道而行，而是透過閱讀原始碼，確切理解具體實作是如何驅動從 epoll 事件到 Future::poll() 消耗 I/O 的整個過程。我不會深入高層次的 Tokio 與 futures 使用細節，現有的教程 有更完整詳細的內容。除了簡短的小結，我也不會探討一般性的非同步 I/O 問題，畢竟這些問題都可寫個獨立的主題了。我的目標是有信心讓 futures 與 Tokio 以我所認知的方式執行。
首先，有些重要的聲明。請注意，Tokio 正快速開發中，這裡所見所聞可能不久就會過時。這個研究中我用了 tokio-core 0.</description></item></channel></rss>