<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Weekly on Weihang Lo</title>
    <link>https://weihanglo.tw/tags/weekly/</link>
    <description>Recent content in Weekly on Weihang Lo</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 11 Apr 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://weihanglo.tw/tags/weekly/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WWW 0x0C: 未具名</title>
      <link>https://weihanglo.tw/posts/2020/www-0x0c/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://weihanglo.tw/posts/2020/www-0x0c/</guid>
      <description>既然疫情嚴重，連假就在家加班吧！
— Weihang Lo 2020.4
 這裡是 WWW 第十二期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
Words Are Hard - An Essay on Communicating With Non-Programmers 以直白的口吻，分享和不同背景的人講解技術的法則。節錄重點如下：
 避免用過多行話 放尊重點，不要擺出紆尊降貴的姿態 給技術解釋加些人性生動的類比 視覺化圖表比口語更易理解 承認自己不熟，但可花時間研究  願我們一起打破工程師古怪又難溝通的刻板印象。
The Raft Consensus Algorithm 最近嘗試貢獻 TiKV，順便複習一下 Raft 共識演算法 Raft 主要訴求是 Understandability，因為 Paxos 太複雜（無誤），Raft 的 server 分為三個 state：
 follower：所有非 leader 的 server 都是 follower leader：所有 client request 都會送到 leader，一個 Raft group 理論上只有一個 leader candidate：達到 election timeout 的 follower 會把自己提升為 candidate，並向其他 server 發出訊息：「請 promote 我當 leader」  而 Raft 主要有兩個的步驟：</description>
    </item>
    
    <item>
      <title>WWW 0x0B: 個資被偷和管理 DNS 紀錄，孰難孰易</title>
      <link>https://weihanglo.tw/posts/2020/www-0x0b/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://weihanglo.tw/posts/2020/www-0x0b/</guid>
      <description>Zoom 很讚，host 可以看你有沒有認真
— Zoom: Attendee attention tracking
 這裡是 WWW 第十一期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
What future does the captical of Japan carry?  Note: 東京不算是日本的「法定」首都
 這份簡報講解 Rust 最流行的非同步框架 Tokio 運作原理，透過圖像化的流程說明 future 如何於 Tokio 互動中被 poll 和 waken，非常直觀易理解，比敝人在 COSCUP 2019 的簡報 Our Future in Rust 好太多了。
Using Zoom? Here are the privacy issues you need to be aware of 因為疫情緣故，最近 Zoom 很夯，剛好有篇文章寫到 Zoom 有很多噁心有趣的 feature：
 host 可以看參與者專不專心，超過 30 喵沒在看 zoom 就會 alert 會存一份聊天紀錄給 host，但沒說 private message 會不會給 host 宣稱蒐集名字、實體位置、email、電話、公司和職稱但不會拿去賣，只會用在「business purposes」  推薦有空看看這篇文章，尤其是「How you can protect your data」一節。</description>
    </item>
    
    <item>
      <title>WWW 0x0A: 嗯，你這塊 0xDEADBEEF</title>
      <link>https://weihanglo.tw/posts/2020/www-0x0a/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://weihanglo.tw/posts/2020/www-0x0a/</guid>
      <description>A programmer had a problem. He thought to himself, &amp;ldquo;I know, I&amp;rsquo;ll solve it with threads!&amp;quot;. has Now problems. two he
— Davidlohr Bueso
 這裡是 WWW 第十期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
The Missing Semester of Your CS Education 這是近期看過最實用導向的大學課程了！由 MIT 博士生授課，但不教死板又混亂的計算機科學，而是貼近開發者，異常實際的工具和技巧。
雖然內容對部分業界人士來說可能略淺，例如 metaprogramming 居然是在講 build system 和 makefile，不過學資訊的學生不一定熟稔，非常適合作為進入業界前先修的「失落的課程」。我自己印象最深刻的是「 &amp;hellip;if you start a command with a leading space it won’t be added to you shell history. 」真的是嚇歪我的毛，推薦大家翻翻看看。
 順便提一下 JonHoo 是我有認真在看的 live-coder。嗯，應該猜的到他寫什麼語言</description>
    </item>
    
    <item>
      <title>WWW 0x09: 到底要不要擔心 blocking</title>
      <link>https://weihanglo.tw/posts/2020/www-0x09/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://weihanglo.tw/posts/2020/www-0x09/</guid>
      <description>A programmer had a problem. He thought to himself, &amp;ldquo;I know, I&amp;rsquo;ll solve it with threads!&amp;quot;. has Now problems. two he
— Davidlohr Bueso
 這裡是 WWW 第玖期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
Stop worrying about blocking: the new async-std runtime, inspired by Go async-std 是 Rust 非同步生態中兩雄之一，欲與 tokio 爭天下。這次的實驗性更新受到 Go 語言啟發，實作了新的 scheduler，主要特點有：
 更快更好更自適應 自動偵測 blocking task 並將其卸載到其他執行緒，避免阻塞 使用者可在 async context 內呼叫 blocking task 而不阻塞  要點重申：你不需函式是 blocking 還是 non-blockging，全丟到 async 裡面呼叫吧！async-std 的 runtime 會偵測，然後幫你解決一切。</description>
    </item>
    
    <item>
      <title>WWW 0x08: 你的 Helm chart 安全嗎</title>
      <link>https://weihanglo.tw/posts/2020/www-0x08/</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://weihanglo.tw/posts/2020/www-0x08/</guid>
      <description>organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations.
&amp;ndash; M. Conway
 這裡是 WWW 第捌期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
My FOSS Story 這篇文章是 Rust 社群非常有名的 Andrew Gallant (@burntsushi) 所撰，講述了他自身與 FOSS 的糾葛。文章裡面許多篇幅在描述 FOSS 中的負面事情，不過這也是開源社群較少提及和處理的一塊。這篇文章也可以視為是 burntsushi 針對最近 Rust 社群最大的 web framework Actix 的作者退出開源界的有感而發。節錄一些我覺得可以帶著走的實用想法：
 設立界線：開源即政治，網路上就是有一堆酸民，就算沒有，也有太多太多 issue 和 PR 壓得我們喘不過氣，把開源工作和個人生活切割開來，設立界線和停損點，自己的活自己安排。 遵循「比例原則」：如果提出一個問題卻僅寥寥幾行，就用寥寥幾行回覆吧。 問題重現：良好的問題回報能搭配簡單重現方式最棒，如果沒辦法，那就帶著作者一起 debug 吧！  作者最後雖然表列許多負面行為，但也說了 FOSS 仍然有許多有趣的經驗和美好。信任為開源之本，希望這篇文章能帶給 FOSS 界打滾的我們更多啟發。
Uncharted territory – discovering vulnerabilities in public Helm Charts ⚠️⚠️⚠️ 你的 Helm chart 安全嗎 ⚠️⚠️⚠️</description>
    </item>
    
    <item>
      <title>WWW 0x07: 為什麼薯餅要炸兩次</title>
      <link>https://weihanglo.tw/posts/2020/www-0x07/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://weihanglo.tw/posts/2020/www-0x07/</guid>
      <description>這裡是 WWW 第柒期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
Why is Rust the Most Loved Programming Language? 又到了推坑 Rust 的時間！這次，Intellij Rust 和 Rust Analyzer 的作者想聊聊為什麼 Rust 值得「最受喜愛的程式語言」的稱號，節錄我覺得蠻有共鳴的點：
  Intellij Rust：用 Kotlin 寫的 Jetbrains IDE Rust Plugin Rust Analyzer：新一代的 Rust IDE language server    Keyword First Syntax：搜尋 foo 函式只要文字搜尋 fn foo 就解決，有利於一般人開發，更使得 IDE 的 parser 更容易開發 Crates：Rust 的 crate 是一個編譯單元，但並沒有 global shared namespace，取而代之的是每個 crate 都會是你的 dependant crate 的一個 property，解決了 lib 命名衝突問題 Eq 並非多型：以前從來沒想過這個問題，但的確不同型別的比較直接 compile error 很合理，不過代價是需要寫一堆 as usize 😂 Trivial Data Types：透過 #[derive(.</description>
    </item>
    
    <item>
      <title>WWW 0x06: Life is short. I hate GIL</title>
      <link>https://weihanglo.tw/posts/2020/www-0x06/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://weihanglo.tw/posts/2020/www-0x06/</guid>
      <description>這裡是 WWW 第陸期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
WebAssembly Isolation with Tyler McMullen 聽了一集個人覺得不難但蠻有內容的 Podcast，主要在講 Isolation 和 WebAssembly 相關的知識，我覺得 web developer 都很值得稍微聽一下，內容包含：
 概要提點了 VM vs. Container 等各種 Isolation 的差異 WASM 如何 isolation workloads：限制 jump instruction 跳到任意的地方 etc. Fastly 為什麼要使用 WASM： 一個請求本來可能要起 container，但 container 啟動時間還是不夠快，WASM 的 isolation 可以提供安全快速的環境 WASM 使用 linear memory model：和一般的 virtual memory 不同，memory space 是連續性一個 block，需要用到更多再與系統 / 瀏覽器請求 WASM 還在解決的問題：與外部世界互動的標準還沒完整， 但可以參考 Fastly 和 Mozilla 等幾個大廠訂定的 WASI（WebAssembly System Interface） WASM 目前 function pointer 只能用 dynamic dispatch，對要求極極極高效能的應用場景較不吃香 市面上的 WASM runtime：lucet、wasmtime（個人補充 wasmer）   Note: Fastly 是市面上前十大的 CDN provider（約第六）</description>
    </item>
    
    <item>
      <title>WWW 0x05: 若單體服務是屎，微服務就是許多屎</title>
      <link>https://weihanglo.tw/posts/2020/www-0x05/</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://weihanglo.tw/posts/2020/www-0x05/</guid>
      <description>這裡是 WWW 第伍期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
Microservices: From Design to Deployment 這是 microservices.io 的作者在 NGINX blog 上面的系列文章，雖然是 2015 年的舊文，從起源、問題，和模式來理解微服務依然詳實，看完絕對驚呼：原來現在 Cloud Native 世界這麼混亂是有些道理！
 Note：不知道為什麼作者很愛提到 Netflix 各種微服務的專案，不過 Netflix 的 Java 開源微服務工具數量之多還真大開眼界
 以下分別摘要每個主題：
Introduction to Microservices 簡介什麼是微服務，有什麼優缺點，並介紹微服務架構下常見元件，鋪陳給接下來的系列文，總之是個不想看可跳過的篇章。
Building Microservices: Using an API Gateway 介紹 API gateway 為什麼存在：統一微服務一致對外的介面，解耦客戶端與微服務們，但缺點是 API gateway 需要更多 operational cost，也要維持 hign availibility。
實作 API gateway 要注意以下幾點：
 Performance：所有請求都會通過 gateway，所以效能和擴充性一定要好 Reactive Programming 模式：gateway 需要集合各種請求，善用 Reactive programming 模式很有幫助 Service Invocation：微服務之間就是 IPC（inter-process communication），如何透過不同模式相互 invoke 很重要，下一章會詳述 Service Discovery：如何讓服務之間互相知道彼此，就是「服務發現」的工作了，分為 client-side 和 service-side discovery，之後有專文說明 Partial Failures：微服務之間不像單體服務可以用簡單的 transaction 處理錯誤並 rollback，處理部分錯誤，保持 CAP 的 consistency 是個重要課題  Building Microservices: Inter‑Process Communication in a Microservices Architecture 介紹微服務間 IPC（inter‑process communication）的方法與模式，這是系列文中最接近實作層面的文章，很棒。</description>
    </item>
    
    <item>
      <title>WWW 0x04: Not feeling the async pressure</title>
      <link>https://weihanglo.tw/posts/2020/www-0x04/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://weihanglo.tw/posts/2020/www-0x04/</guid>
      <description>這裡是 WWW 第肆期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
&amp;ldquo;Performance Matters&amp;rdquo; by Emery Berger 最近滿紅的一個關於 performance measurement 的 影片，講者演講功力深厚，把嚴肅 performance analysis/profiling 議題以輕鬆的口吻娓娓道出，非常推薦。
節錄一些我覺得有趣的點：
 以 CPU 和 transistor 的發展闡述為什麼現代程式越來越注重效能 解釋 Performance Analysis 和 Performance Profiling 有什麼差別 Performance Analysis 是需要統計而且不是 eyeball statistics，然後要排除環境變因 想做 Performance Profiling 可以從另一個角度開始：讓其他不想測試的部分「變慢」  Why Discord is switching from Go to Rust  簡體中文譯文
 標題乍看下有點聳動，其實內容很平實，完整交代來龍去脈：
 背景：Discord ReadState 服務架構和資料結構 問題：高度手動最佳化的 Go 實作仍有兩分鐘一次的 GC spike，測試好幾個 Go 版本都沒解決 行動：用沒有 GC 的 Rust 重寫，公司內其他團隊也有成功案例 成果：各項指標皆勝原本 Go 實作，但有強調不要腦衝什麼都 RiiR   紫色是 Go，藍色是還沒升級 Tokio 0.</description>
    </item>
    
    <item>
      <title>WWW 0x03: What Color is Your Function?</title>
      <link>https://weihanglo.tw/posts/2020/www-0x03/</link>
      <pubDate>Sat, 08 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://weihanglo.tw/posts/2020/www-0x03/</guid>
      <description>你的 function 是什麼顏色？
 這裡是 WWW 第參期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
Using Rust in Windows 相較於 Microsoft 近期在 Rust 社群動作不斷，這篇文章相對平實，不過也藏了許多有趣事實。
 Microsoft 覺得 Cargo 不能容易配合既有的 build system，這個其實和 Google 使用 Bazel 和 Facebook 自己搞 tool 一樣，超巨頭的工作環境太特殊了。不過也提及正在與社群接觸，微軟真的開始關注 Rust 了。 提到了 Rust 很適合做 C 的 safe wrapper，其實這個也是官方死靈書提及的作法，bindgen 真心方便。 對熟悉 C++ 的開發者而言，Rust 學習成本比想像中低了很多，一兩天配合 Rust 好用的周邊工具就可以寫出 idiomatic Rust，這和 RustConf 2019 上 Facebook 僱員的說法一致。 看到最後才發現作者是 Hyper-V team 成員，再聯想到 AWS 用 Rust 寫的 Firecracker 作為 Fargate 和 Lambda 底層的 micro vm，不難想像這些大公司用 C++寫底層的底層員工生活多苦 。  What Color is Your Function?</description>
    </item>
    
    <item>
      <title>WWW 0x02: Distroless Docker for distressed human</title>
      <link>https://weihanglo.tw/posts/2020/www-0x02/</link>
      <pubDate>Sat, 01 Feb 2020 00:00:11 +0800</pubDate>
      
      <guid>https://weihanglo.tw/posts/2020/www-0x02/</guid>
      <description>這裡是 WWW 第貳期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
How to Review a Pull Request 這份是 Rust 的 crates.io（類似 PyPI 和 rubygems）如何審閱拉取請求的文件， 和 Google 那份不太一樣，更貼近專案一點，節錄重點：
 先拉到自己的本地分支，看看 PR 是否達到他宣稱的療效（檢查一般行為） 嘗試用各種手段打爆他（檢查 edge case） 如果有任何失敗，請寫清楚重新產生錯誤的流程 再來就是理解這個修改到底合不合理，是不是其實不需要  這篇 review guideline 短短的，剩下的自己看囉。
Distroless Docker: Containerizing Apps, not VMs - Matthew Moore 本文是 Google 雇員介紹 Distroless Image 演講的重點摘要，對容器化和 Docker 最佳化有興趣的朋友千萬別錯過。
 Distroless GitHub Repo 在此
 Q：何謂 Distroless Image
Distroless 的 distro 是指 Linux 發行版（distro），加了一個 less 就是替 docker image 瘦身，只留 app source 和 runtime 需要的 dependencies，把發行版中不必要的東西都幹掉。</description>
    </item>
    
    <item>
      <title>WWW 0x01: 有個部署「部署「部署 K8s 」」的工具</title>
      <link>https://weihanglo.tw/posts/2020/www-0x01/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:11 +0800</pubDate>
      
      <guid>https://weihanglo.tw/posts/2020/www-0x01/</guid>
      <description>這裡是 WWW 第壹期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
How to Adopt Modern C++17 into Your C++ Code : Build 2018 推個 C++ 影片，微軟的大師 Herb Sutter 很精要地講完重要的 modern feature 除了 smart pointer，還包含了
 move semantic string_view optional any_cast/variant RAII scoped lifetime 心法 =&amp;gt; Rust 已經是 NLL 了  Tanka：Grafana Lab 部署 k8s 的新工具 Tanka 是 Grafana Lab 開源的新部署工具，原文短又清楚，但這邊還是再疊床架屋摘要一次
 YAML 不是動態語言，很多邏輯會不斷重複，不好寫 Helm 很棒，但奠基在 string template 上仍然難寫難維護，彈性不夠高，Chart 維護者沒 export 的欄位你也不能擅自修改 Helm 其實完全沒有抽象化，就算 values.yaml 挖了很多洞，開發者仍然要去看 template 裡面到底做了什麼事  這些的確都是用 Helm 部署的痛點，尤其是低度抽象化，看看精美的 stable/prometheus-operator，就會開始思考 Helm 的定位與其說是 Package manager，倒像只是一堆 yaml 的集合（事實上就是），完全沒有封裝感，更別提 Resource 修改時，很常遇到 Helm 沒辦法正確更新的痛了。</description>
    </item>
    
    <item>
      <title>WWW 0x00: Rust 有個靜態 GC</title>
      <link>https://weihanglo.tw/posts/2020/www-0x00/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>https://weihanglo.tw/posts/2020/www-0x00/</guid>
      <description>如果員工年齡用 5 bits 存，那 J 同事的確最年輕，在 overflow 之後。
傑森 - 2020
 這裡是 WWW 第零期，Wow Weihang Weekly 是一個毫無章法的個人週刊，出刊週期極不固定，從一週到五年都有可能。初期內容以軟體工程為主，等財富自由後會有更多雜食篇章。
Rust has a static garbage collector 雖然這篇作者是 Rust 核心成員，文章鋪陳也是為了褒 Rust，但內文講到 static typed 與 dynamic typed lang 的權衡比較，還有各種 GC 和記憶體管理的精實介紹，覺得蠻值得一讀，第一次聽到 escape analysis 也是驚呼了一下，不就是 GC 版 RAII 嗎！
Starship 小又快的 shell prompt
 config 超簡單 支援顯示 Node.js/Ruby/Python/Rust/Go/AWS/K8s/&amp;hellip; 非常多環境 支援 Git rebase/merge stage 還有 status/branch 還有自帶很醜的顏色  如果覺得 oh-my-zsh 太肥的同學可以來試試看，個人用了半年沒出什麼問題。
A simple C thread pool implementation 看到一個很簡單的 300 行 threadpool in C 實作，想分享一下：</description>
    </item>
    
  </channel>
</rss>