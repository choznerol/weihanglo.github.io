<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Source Reading on Weihang Lo</title>
    <link>https://weihanglo.tw/tags/source-reading/</link>
    <description>Recent content in Source Reading on Weihang Lo</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 12 Oct 2017 22:05:03 +0800</lastBuildDate>
    
	<atom:link href="https://weihanglo.tw/tags/source-reading/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How Is New Terminal In VS Code So Fast?</title>
      <link>https://weihanglo.tw/posts/2017/how-is-new-terminal-in-vs-code-so-fast/</link>
      <pubDate>Thu, 12 Oct 2017 22:05:03 +0800</pubDate>
      
      <guid>https://weihanglo.tw/posts/2017/how-is-new-terminal-in-vs-code-so-fast/</guid>
      <description>Last week, a new version (1.17) of Visual Studio Code was released. While there are many fascinating improvements and features introduced, the one that cought my eyes is &amp;ldquo;Integrated Terminal performance&amp;rdquo; section. Let&amp;rsquo;s check out what they&amp;rsquo;ve done!
(written on 2017-10-12, based on Xterm.js v3, VS Code 1.17)
Old Performance Issue The integrated terminal in VS Code is powered by another popular open-source project &amp;ldquo;Xterm.js&amp;rdquo;, which is currently maintained by SourceLair and community contributors.</description>
    </item>
    
    <item>
      <title>閱讀原始碼：Swift-Then</title>
      <link>https://weihanglo.tw/posts/2017/readthesource-swift-then/</link>
      <pubDate>Tue, 10 Jan 2017 12:15:34 +0800</pubDate>
      
      <guid>https://weihanglo.tw/posts/2017/readthesource-swift-then/</guid>
      <description>本系列文視筆者心情不定期撰寫。
提升程式設計能力的途徑，不外乎一個字「寫」。而另一個重要方法，則是「讀」。我們很容易將雜亂無章的想法轉化為程式碼，卻不易從程式碼反推回作者的意圖。藉由閱讀原始碼，可了解問題脈絡與解法邏輯，探討值得學習的技術點，將別人的多年修煉化為自身內功！
  Programmer 不一定懶惰，但厲害的 programmer 絕對很懶惰！
Weihang Lo &amp;ndash; Daily Trash Talk
 厲害的 programmer 會為了少打幾個字，犧牲睡眠與休閒時間來開發偷懶工具，
第一篇，先從簡單的 Framework 開始，Then 就非常有代表性。
（撰於 2017-01-10，基於 Swift 3.0、 Then 2.1.0）
Problem to Solve 我們知道，Block 的引入為古老的 Objective-C 增添了 lambda／closure 的現代感，Swift 則繼續將其發揚光大。有了 closure，我們不必將所有 UI 元件的設置全擠在 viewDidLoad 裡面。我們只需要：
let label: UILabel = { let label = UILabel() label.textAlignment = .center label.textColor = .black label.text = &amp;#34;Hello, World!&amp;#34; return label }() 可是對懶惰的 programmer 來說，這段程式碼太多地方重複，必定還有偷懶的空間。Then 這個迷你的語法糖 library 就是專為偷懶而生，目的就是將上面冗長的初始化設置簡寫如下：</description>
    </item>
    
  </channel>
</rss>